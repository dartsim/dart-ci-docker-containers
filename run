#!/usr/bin/env bash
set -e

help() {
    echo "Build and upload dart-dev images."
    echo
    echo "Syntax: run [-h|a|p] [-n <name>]"
    echo "options:"
    echo "  -h | --help    Print this Help."
    echo "  -n | --name    [Required] Ubuntu name to build (e.g. xenial, bionic, focal, groovy)."
    echo "                 Ignored if -a is specified."
    echo "  -t | --tag     [Optional] Tag of the image."
    echo "  --platform     [Optional] Architectures (e.g. linux/amd64, linux/arm64)."
    echo "  -p | --push    [Optional] Push the built images."
    echo "  -j             [Optional] Number of cores to use in building images."
    echo
}

image_name=dartsim/dart-dev
dart_version=v6.10

push_to_dockerhub=false
base_image_name=NOT_DEFINED
base_image_tag=latest
build_all=false
dockerfile_name=Dockerfile
docker_build_args=""
platform="linux/amd64"
num_cores=1

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
    -h | --help)
        help
        exit
        ;;
    -p | --push)
        push_to_dockerhub=true
        shift # past argument
        ;;
    -n | --base_image_name)
        base_image_name="$2"
        shift # past argument
        shift # past value
        ;;
    -t | --base_image_tag)
        base_image_tag="$2"
        shift # past argument
        shift # past value
        ;;
    --platform)
        platform="$2"
        shift # past argument
        shift # past value
        ;;
    -j)
        num_cores="$2"
        shift # past argument
        shift # past value
        ;;
    *)                     # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift              # past argument
        ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

build() {
    base_image_name=$1
    base_image_tag=$2

    if [[ $base_image_name == ubuntu ]]; then
        dockerfile_name=Dockerfile.$base_image_name.$base_image_tag
    elif [[ $base_image_name == archlinux ]]; then
        dockerfile_name=Dockerfile.archlinux
    else
        echo "Unsupported OS image: $base_image_name"
        exit 1
    fi

    echo "==============================================================="
    echo " Building $image_name:$base_image_name-$base_image_tag-$dart_version..."
    echo " platforms: $platform"
    echo "==============================================================="

    # Use buildx: https://www.docker.com/blog/multi-arch-images/

    if [ "$push_to_dockerhub" = "true" ]; then
        docker_build_args="$docker_build_args --push"
    fi

    # Use the latest tag: https://hub.docker.com/r/docker/binfmt/tags?page=1&ordering=last_updated
    # docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64

    # https://github.com/tonistiigi/binfmt
    docker run --privileged --rm tonistiigi/binfmt --install all

    docker buildx build \
        --platform $platform \
        -f ./$dart_version/$dockerfile_name \
        --build-arg BASE_IMAGE=$base_image_name:$base_image_tag \
        --build-arg BASE_DIR=./$dart_version \
        --build-arg NUM_CORES=$num_cores \
        $docker_build_args \
        -t $image_name:$base_image_name-$base_image_tag-$dart_version \
        .

    echo "Done"
    echo ""
}

push() {
    image_name_and_tag=$1

    echo "==================================================="
    echo " Pushing $image_name_and_tag..."
    echo "==================================================="

    docker push $image_name_and_tag

    echo "Done"
    echo ""
}

build $base_image_name $base_image_tag
